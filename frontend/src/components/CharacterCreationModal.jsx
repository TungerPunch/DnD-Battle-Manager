import { useState, useEffect } from 'react';

const AVAILABLE_ICONS = ['üßô‚Äç‚ôÇÔ∏è', 'ü¶π‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÄÔ∏è', 'üßü‚Äç‚ôÇÔ∏è', 'üßü‚Äç‚ôÄÔ∏è'];

const WEAPONS = [
  { name: '–ú–µ—á', icon: '‚öîÔ∏è', damage: '1d8' },
  { name: '–õ—É–∫', icon: 'üèπ', damage: '1d6' },
  { name: '–ü–æ—Å–æ—Ö', icon: 'ü™Ñ', damage: '1d6' },
  { name: '–¢–æ–ø–æ—Ä', icon: 'ü™ì', damage: '1d10' },
  { name: '–ö–∏–Ω–∂–∞–ª', icon: 'üó°Ô∏è', damage: '1d4' }
];

const SPELLS = [
  { name: '–û–≥–Ω–µ–Ω–Ω—ã–π –®–∞—Ä', icon: 'üî•', damage: '8d6', type: '–æ–≥–æ–Ω—å' },
  { name: '–õ–µ–¥—è–Ω–∞—è –°—Ç—Ä–µ–ª–∞', icon: '‚ùÑÔ∏è', damage: '6d6', type: '—Ö–æ–ª–æ–¥' },
  { name: '–ú–æ–ª–Ω–∏—è', icon: '‚ö°', damage: '7d6', type: '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ' },
  { name: '–õ–µ—á–µ–Ω–∏–µ', icon: 'üíö', healing: '2d8+4', type: '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ' },
  { name: '–©–∏—Ç', icon: 'üõ°Ô∏è', effect: '+5 –ö–ó', type: '–∑–∞—â–∏—Ç–∞' }
];

export default function CharacterCreationModal({ isOpen, onClose, onCreateCharacter }) {
  const [character, setCharacter] = useState({
    name: '',
    icon: AVAILABLE_ICONS[0],
    description: '',
    stats: {
      strength: 10,
      agility: 10,
      constitution: 10,
      intelligence: 10,
      wisdom: 10,
      charisma: 10,
      hp: 20,
      maxHp: 20,
      ac: 10,
    },
    weapon: WEAPONS[0],
    spells: []
  });

  const handleStatChange = (stat, value) => {
    setCharacter(prev => ({
      ...prev,
      stats: {
        ...prev.stats,
        [stat]: Math.max(1, Math.min(20, parseInt(value) || 0))
      }
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onCreateCharacter(character);
  };

  useEffect(() => {
    const maxHp = 10 + character.stats.constitution;
    const ac = 10 + Math.floor((character.stats.agility - 10) / 2);

    setCharacter(prev => ({
      ...prev,
      stats: {
        ...prev.stats,
        maxHp,
        hp: maxHp,
        ac
      }
    }));
  }, [character.stats.constitution, character.stats.agility]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-[var(--color-bg-secondary)] rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <h2 className="text-2xl font-bold text-[var(--color-text-primary)] mb-4">–°–æ–∑–¥–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞</h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">
                –ò–º—è –ü–µ—Ä—Å–æ–Ω–∞–∂–∞
              </label>
              <input
                type="text"
                value={character.name}
                onChange={(e) => setCharacter(prev => ({ ...prev, name: e.target.value }))}
                className="w-full px-3 py-2 bg-[var(--color-bg-primary)] border border-[var(--color-border)] rounded-lg"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">
                –ò–∫–æ–Ω–∫–∞ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞
              </label>
              <div className="grid grid-cols-5 gap-2">
                {AVAILABLE_ICONS.map((icon) => (
                  <button
                    key={icon}
                    type="button"
                    onClick={() => setCharacter(prev => ({ ...prev, icon }))}
                    className={`text-2xl p-2 rounded-lg ${
                      character.icon === icon 
                        ? 'bg-[var(--color-accent)] text-white' 
                        : 'bg-[var(--color-bg-primary)] hover:bg-[var(--color-bg-hover)]'
                    }`}
                  >
                    {icon}
                  </button>
                ))}
              </div>
            </div>
            
            <div className="col-span-2">
              <label className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–∞
              </label>
              <textarea
                value={character.description}
                onChange={(e) => setCharacter(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 bg-[var(--color-bg-primary)] border border-[var(--color-border)] rounded-lg h-24 resize-none"
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
              />
            </div>
          </div>

          <div>
            <h3 className="text-lg font-medium text-[var(--color-text-primary)] mb-2">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {Object.entries(character.stats)
                .filter(([stat]) => !['hp', 'maxHp', 'ac'].includes(stat))
                .map(([stat, value]) => (
                  <div key={stat}>
                    <label className="block text-sm font-medium text-[var(--color-text-secondary)] mb-1 capitalize">
                      {getStatLabel(stat)}
                    </label>
                    <input
                      type="number"
                      value={value}
                      onChange={(e) => handleStatChange(stat, e.target.value)}
                      min="1"
                      max="20"
                      className="w-full px-3 py-2 bg-[var(--color-bg-primary)] border border-[var(--color-border)] rounded-lg"
                    />
                  </div>
              ))}
            </div>

            <div className="mt-4 grid grid-cols-2 gap-4">
              <div className="bg-[var(--color-bg-primary)] p-3 rounded-lg">
                <div className="text-sm font-medium text-[var(--color-text-secondary)]">–ó–¥–æ—Ä–æ–≤—å–µ</div>
                <div className="text-lg font-bold text-[var(--color-text-primary)]">
                  {character.stats.hp}/{character.stats.maxHp}
                </div>
              </div>
              <div className="bg-[var(--color-bg-primary)] p-3 rounded-lg">
                <div className="text-sm font-medium text-[var(--color-text-secondary)]">–ö–ª–∞—Å—Å –ó–∞—â–∏—Ç—ã</div>
                <div className="text-lg font-bold text-[var(--color-text-primary)]">
                  {character.stats.ac}
                </div>
              </div>
            </div>
          </div>

          <div>
            <h3 className="text-lg font-medium text-[var(--color-text-primary)] mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –û—Ä—É–∂–∏–µ</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {WEAPONS.map((weapon) => (
                <button
                  key={weapon.name}
                  type="button"
                  onClick={() => setCharacter(prev => ({ ...prev, weapon }))}
                  className={`p-3 rounded-lg border ${
                    character.weapon === weapon
                      ? 'border-[var(--color-accent)] bg-[var(--color-accent)]/10'
                      : 'border-[var(--color-border)] hover:bg-[var(--color-bg-hover)]'
                  }`}
                >
                  <div className="text-2xl mb-1">{weapon.icon}</div>
                  <div className="text-sm font-medium">{weapon.name}</div>
                  <div className="text-xs text-[var(--color-text-secondary)]">
                    Damage: {weapon.damage}
                  </div>
                </button>
              ))}
            </div>
          </div>

          <div>
            <h3 className="text-lg font-medium text-[var(--color-text-primary)] mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–º–∞–∫—Å. 3)
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {SPELLS.map((spell) => (
                <button
                  key={spell.name}
                  type="button"
                  onClick={() => {
                    setCharacter(prev => ({
                      ...prev,
                      spells: prev.spells.includes(spell)
                        ? prev.spells.filter(s => s !== spell)
                        : prev.spells.length < 3
                        ? [...prev.spells, spell]
                        : prev.spells
                    }))
                  }}
                  className={`p-3 rounded-lg border ${
                    character.spells.includes(spell)
                      ? 'border-[var(--color-accent)] bg-[var(--color-accent)]/10'
                      : 'border-[var(--color-border)] hover:bg-[var(--color-bg-hover)]'
                  }`}
                  disabled={!character.spells.includes(spell) && character.spells.length >= 3}
                >
                  <div className="text-2xl mb-1">{spell.icon}</div>
                  <div className="text-sm font-medium">{spell.name}</div>
                  <div className="text-xs text-[var(--color-text-secondary)]">
                    {spell.damage || spell.healing || spell.effect}
                  </div>
                </button>
              ))}
            </div>
          </div>

          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-[var(--color-text-primary)] hover:bg-[var(--color-bg-hover)] rounded-lg"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-[var(--color-accent)] text-white rounded-lg hover:bg-[var(--color-accent)]/90"
            >
              –°–æ–∑–¥–∞—Ç—å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

function getStatLabel(stat) {
  const labels = {
    strength: '–°–∏–ª–∞',
    agility: '–õ–æ–≤–∫–æ—Å—Ç—å',
    constitution: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
    intelligence: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    wisdom: '–ú—É–¥—Ä–æ—Å—Ç—å',
    charisma: '–•–∞—Ä–∏–∑–º–∞'
  };
  return labels[stat] || stat;
} 